{
    "snippets": [
        {
            "title": "Depth-First Search (DFS) in a Graph",
            "description": "This snippet demonstrates the Depth-First Search (DFS) algorithm for traversing a graph in Java.",
            "language": "Java",
            "code": [
                "import java.util.*;",
                "",
                "class Graph {",
                "    private int V;",
                "    private LinkedList<Integer> adj[];",
                "",
                "    Graph(int v) {",
                "        V = v;",
                "        adj = new LinkedList[v];",
                "        for (int i = 0; i < v; ++i)",
                "            adj[i] = new LinkedList();",
                "    }",
                "",
                "    void addEdge(int v, int w) {",
                "        adj[v].add(w);",
                "    }",
                "",
                "    void DFSUtil(int v, boolean visited[]) {",
                "        visited[v] = true;",
                "        System.out.print(v + \" \");",
                "",
                "        for (int n : adj[v]) {",
                "            if (!visited[n])",
                "                DFSUtil(n, visited);",
                "        }",
                "    }",
                "",
                "    void DFS(int v) {",
                "        boolean visited[] = new boolean[V];",
                "        DFSUtil(v, visited);",
                "    }",
                "",
                "    public static void main(String args[]) {",
                "        Graph g = new Graph(4);",
                "        g.addEdge(0, 1);",
                "        g.addEdge(0, 2);",
                "        g.addEdge(1, 2);",
                "        g.addEdge(2, 0);",
                "        g.addEdge(2, 3);",
                "        g.addEdge(3, 3);",
                "",
                "        System.out.println(\"DFS starting from vertex 2:\");",
                "        g.DFS(2);",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": [
                "graph",
                "dfs",
                "java"
            ],
            "dateAdded": "2025-01-14",
            "complexity": "O(V + E)",
            "examples": [
                {
                    "input": "Graph with edges (0->1, 0->2, 1->2, 2->0, 2->3, 3->3)",
                    "output": "2 0 1 3"
                }
            ]
        },
        {
            "title": "Breadth-First Search (BFS) in a Graph",
            "description": "This snippet shows how to perform Breadth-First Search (BFS) on a graph in Java.",
            "language": "Java",
            "code": [
                "import java.util.*;",
                "",
                "class Graph {",
                "    private int V;",
                "    private LinkedList<Integer> adj[];",
                "",
                "    Graph(int v) {",
                "        V = v;",
                "        adj = new LinkedList[v];",
                "        for (int i = 0; i < v; ++i)",
                "            adj[i] = new LinkedList();",
                "    }",
                "",
                "    void addEdge(int v, int w) {",
                "        adj[v].add(w);",
                "    }",
                "",
                "    void BFS(int s) {",
                "        boolean visited[] = new boolean[V];",
                "        LinkedList<Integer> queue = new LinkedList<Integer>();",
                "",
                "        visited[s] = true;",
                "        queue.add(s);",
                "",
                "        while (queue.size() != 0) {",
                "            s = queue.poll();",
                "            System.out.print(s + \" \");",
                "",
                "            for (int n : adj[s]) {",
                "                if (!visited[n]) {",
                "                    visited[n] = true;",
                "                    queue.add(n);",
                "                }",
                "            }",
                "        }",
                "    }",
                "",
                "    public static void main(String args[]) {",
                "        Graph g = new Graph(4);",
                "        g.addEdge(0, 1);",
                "        g.addEdge(0, 2);",
                "        g.addEdge(1, 2);",
                "        g.addEdge(2, 0);",
                "        g.addEdge(2, 3);",
                "        g.addEdge(3, 3);",
                "",
                "        System.out.println(\"BFS starting from vertex 2:\");",
                "        g.BFS(2);",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": [
                "graph",
                "bfs",
                "java"
            ],
            "dateAdded": "2025-01-14",
            "complexity": "O(V + E)",
            "examples": [
                {
                    "input": "Graph with edges (0->1, 0->2, 1->2, 2->0, 2->3, 3->3)",
                    "output": "2 0 3 1"
                }
            ]
        },
        {
            "title": "Detecting a Cycle in a Directed Graph",
            "description": "This snippet demonstrates how to detect a cycle in a directed graph using DFS in Java.",
            "language": "Java",
            "code": [
                "import java.util.*;",
                "",
                "class Graph {",
                "    private int V;",
                "    private LinkedList<Integer> adj[];",
                "",
                "    Graph(int v) {",
                "        V = v;",
                "        adj = new LinkedList[v];",
                "        for (int i = 0; i < v; ++i)",
                "            adj[i] = new LinkedList();",
                "    }",
                "",
                "    void addEdge(int v, int w) {",
                "        adj[v].add(w);",
                "    }",
                "",
                "    boolean isCyclicUtil(int v, boolean visited[], boolean recStack[]) {",
                "        if (recStack[v])",
                "            return true;",
                "",
                "        if (visited[v])",
                "            return false;",
                "",
                "        visited[v] = true;",
                "        recStack[v] = true;",
                "",
                "        for (int n : adj[v]) {",
                "            if (isCyclicUtil(n, visited, recStack))",
                "                return true;",
                "        }",
                "",
                "        recStack[v] = false;",
                "        return false;",
                "    }",
                "",
                "    boolean isCyclic() {",
                "        boolean visited[] = new boolean[V];",
                "        boolean recStack[] = new boolean[V];",
                "",
                "        for (int i = 0; i < V; i++)",
                "            if (isCyclicUtil(i, visited, recStack))",
                "                return true;",
                "",
                "        return false;",
                "    }",
                "",
                "    public static void main(String args[]) {",
                "        Graph g = new Graph(4);",
                "        g.addEdge(0, 1);",
                "        g.addEdge(1, 2);",
                "        g.addEdge(2, 0);",
                "        g.addEdge(2, 3);",
                "",
                "        if (g.isCyclic())",
                "            System.out.println(\"Graph contains cycle\");",
                "        else",
                "            System.out.println(\"Graph doesn't contain cycle\");",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": [
                "graph",
                "cycle detection",
                "java"
            ],
            "dateAdded": "2025-01-14",
            "complexity": "O(V + E)",
            "examples": [
                {
                    "input": "Graph with edges (0->1, 1->2, 2->0, 2->3)",
                    "output": "Graph contains cycle"
                }
            ]
        }
    ]
}
