{
    "snippets": [
        {
            "title": "Inserting a Node at the Beginning of a Linked List",
            "description": "This snippet demonstrates how to insert a node at the beginning of a linked list in C++.",
            "language": "C++",
            "code": [
                "#include <iostream>",
                "using namespace std;",
                "class Node {",
                "public:",
                "    int data;",
                "    Node* next;",
                "    Node(int data) {",
                "        this->data = data;",
                "        this->next = nullptr;",
                "    }",
                "};",
                "class LinkedList {",
                "public:",
                "    Node* head;",
                "    LinkedList() {",
                "        head = nullptr;",
                "    }",
                "    void insertAtBeginning(int data) {",
                "        Node* newNode = new Node(data);",
                "        newNode->next = head;",
                "        head = newNode;",
                "    }",
                "};"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "insertion", "beginning", "node", "algorithm"],
            "dateAdded": "2025-01-13",
            "complexity": "O(1)",
            "examples": [
                {
                    "input": "insertAtBeginning(10)",
                    "output": "Linked List: 10"
                }
            ]
        },
        {
            "title": "Reversing a Linked List",
            "description": "This snippet demonstrates how to reverse a singly linked list in Java.",
            "language": "Java",
            "code": [
                "class Node {",
                "    int data;",
                "    Node next;",
                "    Node(int data) {",
                "        this.data = data;",
                "        this.next = null;",
                "    }",
                "}",
                "class LinkedList {",
                "    Node head;",
                "    void reverse() {",
                "        Node prev = null, current = head, next;",
                "        while (current != null) {",
                "            next = current.next;",
                "            current.next = prev;",
                "            prev = current;",
                "            current = next;",
                "        }",
                "        head = prev;",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "reverse", "java"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List: 1 -> 2 -> 3 -> 4",
                    "output": "Reversed Linked List: 4 -> 3 -> 2 -> 1"
                }
            ]
        },
        {
            "title": "Finding the Length of a Linked List",
            "description": "This snippet calculates the length of a singly linked list in Java.",
            "language": "Java",
            "code": [
                "class Node {",
                "    int data;",
                "    Node next;",
                "    Node(int data) {",
                "        this.data = data;",
                "        this.next = null;",
                "    }",
                "}",
                "class LinkedList {",
                "    Node head;",
                "    int getLength() {",
                "        int length = 0;",
                "        Node current = head;",
                "        while (current != null) {",
                "            length++;",
                "            current = current.next;",
                "        }",
                "        return length;",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "length", "java"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List: 10 -> 20 -> 30",
                    "output": "Length: 3"
                }
            ]
        },
        {
            "title": "Merging Two Sorted Linked Lists",
            "description": "This snippet demonstrates how to merge two sorted linked lists in C++.",
            "language": "C++",
            "code": [
                "#include <iostream>",
                "using namespace std;",
                "class Node {",
                "public:",
                "    int data;",
                "    Node* next;",
                "    Node(int data) {",
                "        this->data = data;",
                "        this->next = nullptr;",
                "    }",
                "};",
                "Node* mergeSortedLists(Node* l1, Node* l2) {",
                "    if (!l1) return l2;",
                "    if (!l2) return l1;",
                "    if (l1->data < l2->data) {",
                "        l1->next = mergeSortedLists(l1->next, l2);",
                "        return l1;",
                "    } else {",
                "        l2->next = mergeSortedLists(l1, l2->next);",
                "        return l2;",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "merge", "c++"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n + m)",
            "examples": [
                {
                    "input": "List1: 1 -> 3 -> 5, List2: 2 -> 4 -> 6",
                    "output": "Merged List: 1 -> 2 -> 3 -> 4 -> 5 -> 6"
                }
            ]
        },
        {
            "title": "Detecting a Loop in a Linked List",
            "description": "This snippet demonstrates how to detect a loop in a linked list using Floydâ€™s Cycle-Finding Algorithm in Java.",
            "language": "Java",
            "code": [
                "class Node {",
                "    int data;",
                "    Node next;",
                "    Node(int data) {",
                "        this.data = data;",
                "        this.next = null;",
                "    }",
                "}",
                "class LinkedList {",
                "    Node head;",
                "    boolean hasLoop() {",
                "        Node slow = head, fast = head;",
                "        while (fast != null && fast.next != null) {",
                "            slow = slow.next;",
                "            fast = fast.next.next;",
                "            if (slow == fast) return true;",
                "        }",
                "        return false;",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "loop detection", "java"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List with loop",
                    "output": "True"
                }
            ]
        },
        {
            "title": "Deleting a Node from a Linked List",
            "description": "This snippet demonstrates how to delete a node from a linked list in C++.",
            "language": "C++",
            "code": [
                "#include <iostream>",
                "using namespace std;",
                "class Node {",
                "public:",
                "    int data;",
                "    Node* next;",
                "    Node(int data) {",
                "        this->data = data;",
                "        this->next = nullptr;",
                "    }",
                "};",
                "class LinkedList {",
                "public:",
                "    Node* head;",
                "    LinkedList() {",
                "        head = nullptr;",
                "    }",
                "    void deleteNode(int key) {",
                "        Node* temp = head, *prev = nullptr;",
                "        if (temp != nullptr && temp->data == key) {",
                "            head = temp->next;",
                "            delete temp;",
                "            return;",
                "        }",
                "        while (temp != nullptr && temp->data != key) {",
                "            prev = temp;",
                "            temp = temp->next;",
                "        }",
                "        if (temp == nullptr) return;",
                "        prev->next = temp->next;",
                "        delete temp;",
                "    }",
                "};"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "deletion", "c++"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Delete node with value 20 from Linked List: 10 -> 20 -> 30",
                    "output": "Linked List: 10 -> 30"
                }
            ]
        },
        {
            "title": "Finding the Middle of a Linked List",
            "description": "This snippet demonstrates how to find the middle node of a linked list in Java.",
            "language": "Java",
            "code": [
                "class Node {",
                "    int data;",
                "    Node next;",
                "    Node(int data) {",
                "        this.data = data;",
                "        this.next = null;",
                "    }",
                "}",
                "class LinkedList {",
                "    Node head;",
                "    Node findMiddle() {",
                "        Node slow = head, fast = head;",
                "        while (fast != null && fast.next != null) {",
                "            slow = slow.next;",
                "            fast = fast.next.next;",
                "        }",
                "        return slow;",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "middle node", "java"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List: 1 -> 2 -> 3 -> 4 -> 5",
                    "output": "Middle Node: 3"
                }
            ]
        },
        {
            "title": "Checking if a Linked List is Palindrome",
            "description": "This snippet checks if a singly linked list is a palindrome in C++.",
            "language": "C++",
            "code": [
                "#include <stack>",
                "#include <iostream>",
                "using namespace std;",
                "class Node {",
                "public:",
                "    int data;",
                "    Node* next;",
                "    Node(int data) {",
                "        this->data = data;",
                "        this->next = nullptr;",
                "    }",
                "};",
                "bool isPalindrome(Node* head) {",
                "    stack<int> s;",
                "    Node* temp = head;",
                "    while (temp != nullptr) {",
                "        s.push(temp->data);",
                "        temp = temp->next;",
                "    }",
                "    while (head != nullptr) {",
                "        int top = s.top();",
                "        s.pop();",
                "        if (head->data != top) {",
                "            return false;",
                "        }",
                "        head = head->next;",
                "    }",
                "    return true;",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "palindrome", "c++"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List: 1 -> 2 -> 2 -> 1",
                    "output": "True"
                }
            ]
        },
        {
            "title": "Removing Duplicates from a Linked List",
            "description": "This snippet demonstrates how to remove duplicates from a linked list in Java.",
            "language": "Java",
            "code": [
                "import java.util.HashSet;",
                "class Node {",
                "    int data;",
                "    Node next;",
                "    Node(int data) {",
                "        this.data = data;",
                "        this.next = null;",
                "    }",
                "}",
                "class LinkedList {",
                "    Node head;",
                "    void removeDuplicates() {",
                "        HashSet<Integer> set = new HashSet<>();",
                "        Node current = head;",
                "        Node prev = null;",
                "        while (current != null) {",
                "            if (set.contains(current.data)) {",
                "                prev.next = current.next;",
                "            } else {",
                "                set.add(current.data);",
                "                prev = current;",
                "            }",
                "            current = current.next;",
                "        }",
                "    }",
                "}"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "remove duplicates", "java"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List: 1 -> 2 -> 2 -> 3",
                    "output": "Linked List: 1 -> 2 -> 3"
                }
            ]
        },
        {
            "title": "Rotating a Linked List",
            "description": "This snippet demonstrates how to rotate a linked list by k positions in C++.",
            "language": "C++",
            "code": [
                "#include <iostream>",
                "using namespace std;",
                "class Node {",
                "public:",
                "    int data;",
                "    Node* next;",
                "    Node(int data) {",
                "        this->data = data;",
                "        this->next = nullptr;",
                "    }",
                "};",
                "class LinkedList {",
                "public:",
                "    Node* head;",
                "    LinkedList() {",
                "        head = nullptr;",
                "    }",
                "    void rotate(int k) {",
                "        if (k == 0) return;",
                "        Node* current = head;",
                "        int count = 1;",
                "        while (count < k && current != nullptr) {",
                "            current = current->next;",
                "            count++;",
                "        }",
                "        if (current == nullptr) return;",
                "        Node* kthNode = current;",
                "        while (current->next != nullptr) {",
                "            current = current->next;",
                "        }",
                "        current->next = head;",
                "        head = kthNode->next;",
                "        kthNode->next = nullptr;",
                "    }",
                "};"
            ],
            "contributor": "V-A-T-S-A-L",
            "tags": ["linked list", "rotate", "c++"],
            "dateAdded": "2025-01-13",
            "complexity": "O(n)",
            "examples": [
                {
                    "input": "Linked List: 1 -> 2 -> 3 -> 4 -> 5, k = 2",
                    "output": "Rotated List: 3 -> 4 -> 5 -> 1 -> 2"
                }
            ]
        }
    ]
}
